{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ivry CLI Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Ivry CLI is a powerful command-line interface tool designed to simplify the process of creating, managing, and deploying AI applications. It provides seamless integration with ComfyUI workflows and supports various AI model deployment scenarios.</p>"},{"location":"#what-is-ivry","title":"What is Ivry?","text":"<p>Ivry is a platform that allows AI creators to easily build, deploy, and share their AI applications. The Ivry CLI tool is the command-line interface that provides direct access to the Ivry platform, enabling you to:</p> <ul> <li>Initialize new AI projects</li> <li>Manage authentication with the Ivry platform</li> <li>Pull existing projects from the Ivry server</li> <li>Run and monitor your AI services</li> <li>Deploy your applications with secure tunneling</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Simple Project Initialization: Create new ComfyUI or custom model projects with a single command</li> <li>Seamless Authentication: Secure login with API tokens</li> <li>Project Management: List, pull, and manage your applications</li> <li>Service Orchestration: Start, stop, and monitor your AI services</li> <li>Automatic Tunneling: Integrated Cloudflare tunnel support for secure public access</li> <li>Process Management: Built-in PM2 integration for reliable process management</li> <li>Comprehensive Logging: Monitor your application's performance and troubleshoot issues</li> </ul>"},{"location":"#who-should-use-ivry-cli","title":"Who Should Use Ivry CLI?","text":"<p>Ivry CLI is designed for:</p> <ul> <li>AI Developers who want to deploy their models for public consumption</li> <li>ComfyUI Workflow Creators who want to share their workflows as applications</li> <li>Data Scientists who need to deploy models in a production environment</li> <li>AI Enthusiasts who want to experiment with sharing their creations</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with Ivry CLI, you'll need to:</p> <ol> <li>Install Ivry CLI on your system</li> <li>Authenticate with your Ivry API key</li> <li>Initialize your first project</li> </ol>"},{"location":"#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.9 or higher</li> <li>OS: Windows (with WSL2), macOS, or Linux</li> <li>Dependencies: </li> <li>Node.js and npm</li> <li>PM2 (installed automatically)</li> <li>Cloudflared (installed automatically on Linux)</li> </ul>"},{"location":"getting-started/","title":"\ud83d\ude80 Getting Started","text":"<p>Welcome to ivry-docs! Please select your operating system below to proceed with the installation guide. \ud83d\udc47</p>"},{"location":"getting-started/#choose-your-operating-system","title":"\ud83d\udcbb Choose Your Operating System","text":"<p>=== \"Windows\"     \ud83d\udccc If you're using Windows, click the button below to access the installation guide:</p> <p></p> <p>=== \"macOS\"     \ud83c\udf4f If you're using macOS, click the button below to access the installation guide:</p> <p></p> <p>=== \"Linux\"     \ud83d\udc27 If you're using Linux, click the button below to access the installation guide:</p> <p></p>"},{"location":"reference/","title":"CLI Reference","text":"<p>This page provides detailed information about all available Ivry CLI commands, their options, and usage examples.</p>"},{"location":"reference/#authentication-commands","title":"Authentication Commands","text":""},{"location":"reference/#login","title":"Login","text":"<p>Authenticate with the Ivry platform using your API key.</p> <pre><code>ivry_cli login --auth_token YOUR_API_KEY\n</code></pre> <p>Parameters:</p> <ul> <li><code>--auth_token</code> (required): Your Ivry API key, which can be obtained from the Ivry website</li> </ul> <p>Example:</p> <pre><code>ivry_cli login --auth_token a1b2c3d4e5f6g7h8i9j0\n</code></pre> <p>Response:</p> <pre><code>Token saved in /home/user/.ivry/token.txt\n</code></pre>"},{"location":"reference/#project-management-commands","title":"Project Management Commands","text":""},{"location":"reference/#list-apps","title":"List Apps","text":"<p>List all your applications registered on the Ivry platform.</p> <pre><code>ivry_cli list_apps\n</code></pre> <p>Example:</p> <pre><code>ivry_cli list_apps\n</code></pre> <p>Response:</p> <pre><code>Applications retrieved successfully!\n\n================================================================================\nID              Name                      isPublic         state           Created Date\n--------------------------------------------------------------------------------\n123             stable_diffusion_app      True             active          2025-03-01\n456             image_segmentation        False            inactive        2025-02-15\n================================================================================\nRetrieved 2 applications.\n</code></pre>"},{"location":"reference/#pull-project","title":"Pull Project","text":"<p>Pull an existing project from the Ivry platform to your local environment.</p> <pre><code>ivry_cli pull_project --app_id APP_ID [--comfyui_port PORT] [--project_name NAME] [--comfyUI_dir DIR]\n</code></pre> <p>Parameters:</p> <ul> <li><code>--app_id</code> (required): ID of the application to pull</li> <li><code>--comfyui_port</code> (optional): Port of the ComfyUI process (default: <code>8188</code>)</li> <li><code>--project_name</code> (optional): Custom name for the local project directory</li> <li><code>--comfyUI_dir</code> (optional): Path to your ComfyUI installation</li> </ul> <p>Example:</p> <pre><code>ivry_cli pull_project --app_id 123 --comfyUI_dir /home/user/ComfyUI\n</code></pre> <p>Response:</p> <pre><code>Getting 123's config...\nfolder ivry_project/comfyUI_project/app_123 created\napp_config.json saved to ivry_project/comfyUI_project/app_123\ntunnel_config.json saved to ivry_project/comfyUI_project/app_123\napp 123 pulled to app_123/ folder\n</code></pre>"},{"location":"reference/#parse-predict-file","title":"Parse Predict File","text":"<p>Parse a predict.py file to generate a predict_signature.json file.</p> <pre><code>ivry_cli parse_predict [--predict_filename FILE]\n</code></pre> <p>Parameters:</p> <ul> <li><code>--predict_filename</code> (optional): Path to the predict.py file (default: <code>predict.py</code>)</li> </ul> <p>Example:</p> <pre><code>ivry_cli parse_predict --predict_filename custom_predict.py\n</code></pre> <p>Response:</p> <pre><code>Created predict_signature.json\n</code></pre>"},{"location":"reference/#server-management-commands","title":"Server Management Commands","text":""},{"location":"reference/#run-server","title":"Run Server","text":"<p>Start the Ivry server and Cloudflare tunnel using PM2 process manager.</p> <pre><code>ivry_cli run_server [--project PROJECT] [--force]\n</code></pre> <p>Parameters:</p> <ul> <li><code>--project</code> (optional): Path to the project directory (default: current directory)</li> <li><code>--force</code> (optional): Force restart services even if they're already running</li> </ul> <p>Example:</p> <pre><code>ivry_cli run_server --project app_123 --force\n</code></pre> <p>Response:</p> <pre><code>Starting ivry_cli model server and cloudflared tunnel for project at: ivry_project/comfyUI_project/app_123\nModel ID: 123abc456def789\nLogs will be written to: ivry_project/comfyUI_project/app_123/logs\nLog files will be limited to 1MB each\nServices started with PM2.\nTo view status: ivry_cli pm2_status\nTo control services: ivry_cli pm2_control [start|stop|restart]\nTo view logs: ivry_cli pm2_logs\nTo stop all services: ivry_cli stop_server\n</code></pre>"},{"location":"reference/#stop-server","title":"Stop Server","text":"<p>Stop all Ivry services managed by PM2.</p> <pre><code>ivry_cli stop_server [--project PROJECT] [--force]\n</code></pre> <p>Parameters:</p> <ul> <li><code>--project</code> (optional): Path to the project directory (default: current directory)</li> <li><code>--force</code> (optional): Forcibly stop all processes</li> </ul> <p>Example:</p> <pre><code>ivry_cli stop_server --force\n</code></pre> <p>Response:</p> <pre><code>All ivry services have been forcibly terminated.\n</code></pre>"},{"location":"reference/#start-server-components-legacy","title":"Start Server Components (Legacy)","text":"<p>Start individual server components (use <code>run_server</code> instead for most cases).</p> <pre><code>ivry_cli start {model|business} [--upload-url URL] [OPTIONS]\n</code></pre> <p>Parameters:</p> <ul> <li><code>model|business</code>: Component to start</li> <li><code>--upload-url</code> (optional): URL for file uploads</li> <li>Additional options passed to the server</li> </ul> <p>Example:</p> <pre><code>ivry_cli start model --upload-url=https://www.ivry.co/pc/client-api/upload\n</code></pre>"},{"location":"reference/#pm2-management-commands","title":"PM2 Management Commands","text":""},{"location":"reference/#pm2-status","title":"PM2 Status","text":"<p>Display the status of Ivry services managed by PM2.</p> <pre><code>ivry_cli pm2_status [--project PROJECT]\n</code></pre> <p>Parameters:</p> <ul> <li><code>--project</code> (optional): Path to the project directory (default: current directory)</li> </ul> <p>Example:</p> <pre><code>ivry_cli pm2_status\n</code></pre> <p>Response:</p> <pre><code>PM2 process status:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 App name           \u2502 id \u2502 mode \u2502 pid   \u2502 status \u2502 restart \u2502 uptime \u2502 cpu    \u2502 mem  \u2502 user      \u2502 watching \u2502 version  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ivry_server        \u2502 0  \u2502 fork \u2502 12345 \u2502 online \u2502 0       \u2502 2h     \u2502 0.5%   \u2502 56MB \u2502 user      \u2502 disabled \u2502 0.1.0    \u2502\n\u2502 ivry_cloudflared_\u2026 \u2502 1  \u2502 fork \u2502 12346 \u2502 online \u2502 0       \u2502 2h     \u2502 0.2%   \u2502 30MB \u2502 user      \u2502 disabled \u2502 N/A      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/#pm2-control","title":"PM2 Control","text":"<p>Control PM2 processes for Ivry services.</p> <pre><code>ivry_cli pm2_control COMMAND [--process PROCESS] [--project PROJECT]\n</code></pre> <p>Parameters:</p> <ul> <li><code>COMMAND</code> (required): Command to execute ('start', 'stop', 'restart', or 'reload')</li> <li><code>--process</code> (optional): Process to control ('ivry_server', 'ivry_cloudflared_tunnel', or 'all') (default: 'all')</li> <li><code>--project</code> (optional): Path to the project directory (default: current directory)</li> </ul> <p>Example:</p> <pre><code>ivry_cli pm2_control restart --process ivry_server\n</code></pre> <p>Response:</p> <pre><code>command 'pm2 restart ivry_server' success \n\nstatus:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 App name           \u2502 id \u2502 mode \u2502 pid   \u2502 status \u2502 restart \u2502 uptime \u2502 cpu    \u2502 mem  \u2502 user      \u2502 watching \u2502 version  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ivry_server        \u2502 0  \u2502 fork \u2502 12347 \u2502 online \u2502 1       \u2502 0s     \u2502 0.5%   \u2502 56MB \u2502 user      \u2502 disabled \u2502 0.1.0    \u2502\n\u2502 ivry_cloudflared_\u2026 \u2502 1  \u2502 fork \u2502 12346 \u2502 online \u2502 0       \u2502 2h     \u2502 0.2%   \u2502 30MB \u2502 user      \u2502 disabled \u2502 N/A      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/#pm2-logs","title":"PM2 Logs","text":"<p>View logs from PM2-managed Ivry services.</p> <pre><code>ivry_cli pm2_logs [--process PROCESS] [--lines LINES] [--project PROJECT]\n</code></pre> <p>Parameters:</p> <ul> <li><code>--process</code> (optional): Process to view logs for ('ivry_server', 'ivry_cloudflared_tunnel', or 'all') (default: 'all')</li> <li><code>--lines</code> (optional): Number of log lines to show (default: 20)</li> <li><code>--project</code> (optional): Path to the project directory (default: current directory)</li> </ul> <p>Example:</p> <pre><code>ivry_cli pm2_logs --process ivry_server --lines 50\n</code></pre> <p>Response:</p> <pre><code>=== ivry_server log (latest 50 lines) ===\n2025-03-18 13:45:22 INFO Starting ivry_cli model server\n2025-03-18 13:45:23 INFO Setting up server on port 3009\n2025-03-18 13:45:23 INFO Server started successfully\n...\n</code></pre>"},{"location":"reference/#utility-commands","title":"Utility Commands","text":""},{"location":"reference/#find-comfyui","title":"Find ComfyUI","text":"<p>Detect running ComfyUI instances, their installation paths, and ports.</p> <pre><code>ivry_cli find_comfyUI\n</code></pre> <p>Example:</p> <pre><code>ivry_cli find_comfyUI\n</code></pre> <p>Response:</p> <pre><code>detected ComfyUI process: PID=12345, name=python3\n  comfyUI install path: /home/user/ComfyUI\n  listening port: 8188\n</code></pre>"},{"location":"reference/#common-options-and-flags","title":"Common Options and Flags","text":"<p>Most Ivry CLI commands support the following options:</p> <ul> <li><code>--help</code>: Show help message for the command</li> <li><code>--verbose</code>: Enable verbose output for debugging</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This guide addresses common issues you might encounter when using Ivry CLI and provides solutions to help you resolve them quickly.</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#module-not-found-error","title":"Module Not Found Error","text":"<p>Problem: After installation, running <code>ivry_cli</code> commands results in a \"No module named 'ivry_cli'\" error.</p> <p>Solutions:</p> <pre><code># Verify that the installation completed successfully\npip list | grep ivry_cli\n\n# Try reinstalling with\npip install -e . --force-reinstall\n\n# Check your Python path\npython -c \"import sys; print(sys.path)\"\n\n# If the ivry_cli directory is not in the path, add it manually\nexport PYTHONPATH=$PYTHONPATH:/path/to/ivry_cli\n</code></pre>"},{"location":"troubleshooting/#cloudflared-installation-issues","title":"Cloudflared Installation Issues","text":"<p>Problem: The <code>cloudflared</code> command is not found after installation.</p> <p>Solutions:</p> <pre><code># For Debian/Ubuntu\nwget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb\nsudo dpkg -i cloudflared-linux-amd64.deb\n\n# For other distributions\ncurl -L --output cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64\nchmod +x cloudflared\nsudo mv cloudflared /usr/local/bin\n</code></pre>"},{"location":"troubleshooting/#nodejs-and-npm-issues","title":"Node.js and npm Issues","text":"<p>Problem: PM2 installation fails or commands like <code>pm2</code> are not found.</p> <p>Solutions:</p> <pre><code># Verify Node.js installation\nnode --version\nnpm --version\n\n# If not installed, install Node.js and npm\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Install PM2 globally\nsudo npm install -g pm2\n\n# If permission issues occur\nmkdir -p ~/.npm-global\nnpm config set prefix '~/.npm-global'\necho 'export PATH=~/.npm-global/bin:$PATH' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\nnpm install -g pm2\n</code></pre>"},{"location":"troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"troubleshooting/#api-key-problems","title":"API Key Problems","text":"<p>Problem: Authentication fails with \"Invalid API key\" errors.</p> <p>Solutions:</p> <pre><code># Check if your API key is properly saved\ncat ~/.ivry/token.txt\n\n# Re-authenticate with your API key\nivry_cli login --auth_token YOUR_API_KEY\n</code></pre>"},{"location":"troubleshooting/#expired-or-invalid-token","title":"Expired or Invalid Token","text":"<p>Problem: Requests to the Ivry platform fail with authentication errors.</p> <p>Solutions:</p> <ol> <li>Login to the Ivry website to check your API key status</li> <li>Generate a new API key if necessary</li> <li>Re-authenticate with the new API key:</li> </ol> <pre><code>ivry_cli login --auth_token YOUR_NEW_API_KEY\n</code></pre>"},{"location":"troubleshooting/#server-and-deployment-issues","title":"Server and Deployment Issues","text":""},{"location":"troubleshooting/#port-already-in-use","title":"Port Already in Use","text":"<p>Problem: Starting the Ivry server fails with \"Port 3009 is already in use\" error.</p> <p>Solutions:</p> <pre><code># Find what's using port 3009\nsudo lsof -i :3009\n\n# Kill the process\nsudo kill -9 &lt;PID&gt;\n\n# Or force restart the server\nivry_cli run_server --force\n</code></pre>"},{"location":"troubleshooting/#pm2-process-management-issues","title":"PM2 Process Management Issues","text":"<p>Problem: PM2 processes get stuck or don't start properly.</p> <p>Solutions:</p> <pre><code># Check PM2 process status\nivry_cli pm2_status\n\n# Restart PM2 processes\nivry_cli pm2_control restart\n\n# Or directly use PM2 commands\npm2 kill\npm2 resurrect\n\n# Delete and recreate PM2 processes\nivry_cli stop_server --force\nivry_cli run_server --force\n</code></pre>"},{"location":"troubleshooting/#log-file-size-issues","title":"Log File Size Issues","text":"<p>Problem: Log files grow too large and cause disk space problems.</p> <p>Solutions:</p> <pre><code># Check log sizes\nls -lh path/to/project/logs/\n\n# Manually truncate logs if needed\ntruncate -s 0 path/to/project/logs/ivry_server.log\ntruncate -s 0 path/to/project/logs/cloudflared.log\n\n# Restart services with log rotation enabled\nivry_cli stop_server\nivry_cli run_server\n</code></pre>"},{"location":"troubleshooting/#comfyui-integration-issues","title":"ComfyUI Integration Issues","text":""},{"location":"troubleshooting/#comfyui-connection-failures","title":"ComfyUI Connection Failures","text":"<p>Problem: Ivry CLI cannot connect to ComfyUI or reports \"ComfyUI server is not running\".</p> <p>Solutions:</p> <pre><code># Check if ComfyUI is running\nivry_cli find_comfyUI\n\n# Make sure ComfyUI is running with the --listen flag\n# If using Windows, start ComfyUI with:\npython main.py --listen\n\n# Check port accessibility\ncurl http://127.0.0.1:8188 -I\n\n# If using Windows+WSL, ensure the path is correctly converted\nivry_cli pull_project --app_id YOUR_APP_ID --comfyUI_dir \"E:\\\\ComfyUI\\\\path\" --comfyui_port 8188\n</code></pre>"},{"location":"troubleshooting/#comfyui-workflow-issues","title":"ComfyUI Workflow Issues","text":"<p>Problem: ComfyUI workflow errors or nodes not found.</p> <p>Solutions:</p> <ol> <li>Verify your workflow JSON is valid in ComfyUI directly</li> <li>Check that all required custom nodes are installed</li> <li>Ensure the workflow is properly formatted</li> </ol> <pre><code># Validate the JSON format\ncat comfyui_workflows/your_workflow.json | jq\n</code></pre> <ol> <li>Check for file path issues, especially when using Windows</li> </ol>"},{"location":"troubleshooting/#file-path-issues","title":"File Path Issues","text":""},{"location":"troubleshooting/#wsl-windows-path-conversion-problems","title":"WSL-Windows Path Conversion Problems","text":"<p>Problem: Files cannot be found or accessed, especially when working between Windows and WSL.</p> <p>Solutions:</p> <p>For Windows paths that need conversion to WSL:</p> <pre><code># Convert Windows path to WSL path (in WSL terminal)\nwslpath 'C:\\Users\\YourName\\Documents'\n\n# Access Windows drives from WSL\nls /mnt/c/Users/YourName/Documents\n\n# Make sure to use quotes for Windows paths with Ivry CLI\nivry_cli pull_project --app_id 123 --comfyUI_dir \"E:\\ComfyUI_windows_portable\\ComfyUI\"\n</code></pre> <p>For WSL paths that need conversion to Windows:</p> <pre><code># In PowerShell (requires WSL installed)\nwsl pwd\n\n# Access WSL files from Windows\nexplorer.exe \\\\wsl$\\Ubuntu\\home\\username\n</code></pre>"},{"location":"troubleshooting/#networking-issues","title":"Networking Issues","text":""},{"location":"troubleshooting/#cloudflare-tunnel-problems","title":"Cloudflare Tunnel Problems","text":"<p>Problem: Cloudflare tunnel fails to establish or reports errors.</p> <p>Solutions:</p> <pre><code># Check Cloudflare tunnel status\nivry_cli pm2_logs --process ivry_cloudflared_tunnel\n\n# Verify tunnel configuration\ncat tunnel_config.json\n\n# Manually restart the tunnel\nivry_cli pm2_control restart --process ivry_cloudflared_tunnel\n\n# If issues persist, try forcing a reconnection\ncloudflared tunnel cleanup\nivry_cli stop_server --force\nivry_cli run_server --force\n</code></pre>"},{"location":"troubleshooting/#proxy-or-firewall-issues","title":"Proxy or Firewall Issues","text":"<p>Problem: Network connections fail due to proxy or firewall restrictions.</p> <p>Solutions:</p> <ol> <li>Check your proxy settings</li> <li>Ensure required ports (3009, 8188) are open</li> <li>If behind a corporate firewall, request exceptions for the required services</li> </ol> <pre><code># Test connectivity to Ivry servers\ncurl -v https://www.ivry.co/api/status\n\n# Check if port 3009 is listening\nss -tulpn | grep 3009\n</code></pre>"},{"location":"troubleshooting/#environment-and-python-issues","title":"Environment and Python Issues","text":""},{"location":"troubleshooting/#python-version-conflicts","title":"Python Version Conflicts","text":"<p>Problem: Python version incompatibilities cause errors.</p> <p>Solutions:</p> <pre><code># Check your Python version\npython --version\n\n# Create a virtual environment with the correct Python version\npython3.9 -m venv venv\nsource venv/bin/activate\n\n# Install Ivry CLI in the virtual environment\npip install -e /path/to/ivry_cli\n</code></pre>"},{"location":"troubleshooting/#package-dependency-conflicts","title":"Package Dependency Conflicts","text":"<p>Problem: Dependency conflicts between Ivry CLI and other installed packages.</p> <p>Solutions:</p> <pre><code># Create an isolated environment\npython -m venv --clear ~/.venv/ivry_isolated\nsource ~/.venv/ivry_isolated/bin/activate\n\n# Install Ivry CLI in the isolated environment\npip install -e /path/to/ivry_cli\n</code></pre>"},{"location":"troubleshooting/#debugging-techniques","title":"Debugging Techniques","text":""},{"location":"troubleshooting/#enable-verbose-logging","title":"Enable Verbose Logging","text":"<p>To get more detailed information during troubleshooting:</p> <pre><code># Set environment variable for debug logging\nexport COG_LOG_LEVEL=DEBUG\nivry_cli run_server\n\n# Check detailed logs\nivry_cli pm2_logs --lines 100\n</code></pre>"},{"location":"troubleshooting/#test-components-individually","title":"Test Components Individually","text":"<p>To identify which component is causing issues:</p> <pre><code># Test ComfyUI connection\ncurl -v http://localhost:8188/\n\n# Test Cloudflared connection\ncloudflared tunnel info\n\n# Test Ivry server directly\npython -m cog.server.http --host=127.0.0.1 --port=3009\n</code></pre>"},{"location":"troubleshooting/#common-fixes-checklist","title":"Common Fixes Checklist","text":"<p>When troubleshooting, try these steps in order:</p> <ol> <li>Restart the services: <code>ivry_cli stop_server &amp;&amp; ivry_cli run_server</code></li> <li>Check log files for specific errors: <code>ivry_cli pm2_logs</code></li> <li>Verify network connectivity to required services</li> <li>Ensure file paths are correctly formatted for your OS</li> <li>Validate configuration files (tunnel_config.json, predict.py)</li> <li>Check resource usage (CPU, memory, disk space)</li> <li>Try with <code>--force</code> option: <code>ivry_cli run_server --force</code></li> </ol> <p>If problems persist after trying these solutions, please reach out to the Ivry support team with detailed information about your issue.</p>"},{"location":"webui/","title":"Ivry WebUI Guide","text":"<p>Ivry provides a Gradio-based WebUI that allows users to interact with models visually. This guide explains how to launch, configure, and troubleshoot the WebUI on Windows and macOS/Ubuntu.</p>"},{"location":"webui/#webui-on-windows","title":"WebUI on Windows","text":""},{"location":"webui/#1-unlocking-features-and-install-wsl2","title":"1. Unlocking features and install wsl2","text":""},{"location":"webui/#11-use-install-bat-to-install-wsl2","title":"1.1 use install bat to install wsl2","text":"<p>Open wsl_install.bat as an administrator.</p> <ul> <li>Right click -&gt; Run as administrator...</li> </ul> <p>You should see: </p> <p></p> <p>If you cannot run this file successfully, try:</p> <p>Go to microsoft store and install ubuntu-22.04</p>"},{"location":"webui/#12-reboot","title":"1.2 reboot","text":"<p>Before moving forward, make sure you reboot your computer so that Windows 11 will have WSL2 and virtualization available to it.</p>"},{"location":"webui/#2-init-wsl2-environment","title":"2. Init wsl2 environment","text":""},{"location":"webui/#21-install-requirements","title":"2.1 install requirements","text":"<p>Install requirements by </p> <pre><code>. install.sh\n</code></pre> <p>note: if your wsl cannot do apt update, you can open install.sh in notebook and copy paste each steps</p>"},{"location":"webui/#3-run-webui","title":"3. Run webui","text":"<p>Run webui by: <pre><code>python ui.py\n</code></pre></p>"},{"location":"webui/#webui-on-macos-ubuntu","title":"WebUI on macOS / Ubuntu","text":""},{"location":"webui/#1-install-cloudflared","title":"1. Install Cloudflared","text":"<p>Install Cloudflared to ensure your network safety</p> <p>macOS: <pre><code>brew install cloudflare/cloudflare/cloudflared\n</code></pre></p> <p>Ubuntu: <pre><code>wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb\ndpkg -i cloudflared-linux-amd64.deb\n</code></pre></p>"},{"location":"webui/#2-clone-the-ivry-repository","title":"2. Clone the Ivry repository","text":"<pre><code>git clone https://github.com/neural-image/ivry.git\n</code></pre>"},{"location":"webui/#3-install-the-cli","title":"3. Install the CLI","text":"<pre><code>cd ivry_cli\n. install.sh\n</code></pre>"},{"location":"webui/#4-run-webui","title":"4. Run webui","text":"<p>Run webui by: <pre><code>python ui.py\n</code></pre></p>"},{"location":"webui/#troubleshots","title":"Troubleshots","text":"<p>If you encounter websocket problem, you could try to reinstall websocket by: <pre><code>pip uninstall websockets\npip install websockets\n</code></pre></p>"},{"location":"webui_usage/","title":"Ivry WebUI Guide","text":"<p>Ivry provides a Gradio-based WebUI that allows users to interact with models visually. This guide explains how to launch, configure, and troubleshoot the WebUI on Windows and macOS/Ubuntu.</p> <p>For windows users</p> <p>Each time enter wsl2, please make sure your enabled the venv. You can activate your venv by: <pre><code>source myenv/bin/activate #if you use install.sh to install the environment\n</code></pre></p>"},{"location":"webui_usage/#1-login-from-webui","title":"1. Login from Webui","text":"<p>Log in and save your authentication credentials on your computer to ensure smooth operation in subsequent steps. You can easily login from webui by getting apikey from ivry website:</p> <p></p> <p>You only need do this once, so for next time, you don't need to login again as long as token.txt is located in your machine</p>"},{"location":"webui_usage/#switch-accounts","title":"switch accounts","text":"<p>You can switch accounts by login again with different apikey.</p>"},{"location":"getting-started/linux/","title":"Linux Installation Guide","text":""},{"location":"getting-started/linux/#1-clone-the-ivry_cli-repository","title":"1. Clone the ivry_cli repository","text":"<pre><code>git clone https://github.com/Neural-Image/ivry_cli.git -b comfyUI\n</code></pre>"},{"location":"getting-started/linux/#2-install-the-cli","title":"2. Install the CLI","text":"<pre><code>cd ivry_cli\n</code></pre> <pre><code>./install.sh\n</code></pre> <p>if you encounter a permission error: <pre><code>chmod +x install.sh\n./install.sh\n</code></pre></p> <pre><code>source ~/.bashrc\n</code></pre> <p>you can check your installation by <pre><code>ivry_cli\n</code></pre></p> <p>and check pm2 installation by</p> <pre><code>pm2\n</code></pre> <p>if your pm2 could not found, you could use</p> <pre><code>npm install -g pm2\n</code></pre> <p>It will show a simple introduction to the cli, you could use \"q\" to quit</p>"},{"location":"getting-started/linux/#3-authenticate-using-an-api-key","title":"3. Authenticate using an API key","text":"<p>You need to go to our website and become a developer to get the apikey ivry website</p> <p>And then, login from ivry cli: <pre><code>ivry login YOUR_API_KEY\n</code></pre></p>"},{"location":"getting-started/linux/#4-create-your-app","title":"4. Create Your App","text":"<p>we support comfyUI apps and python apps.</p>"},{"location":"getting-started/linux/#for-comfyui-creator","title":"For ComfyUI creator:","text":"<ol> <li> <p>Create your app on ivry website</p> </li> <li> <p>Pull your project to cli (windows users):</p> <p>When using ComfyUI with Ivry CLI, ensure:</p> <p>a. ComfyUI is running with the <code>--listen</code> flag to enable API access</p> <p>b. Port 8188 (or your configured port) is accessible</p> <pre><code>ivry_cli pull_project --app_id your_app_id # you can specify your port by adding --comfyui_port\n</code></pre> <p>Example:</p> <pre><code>ivry_cli pull_project --app_id 123 \n</code></pre> <p>You can see your project locate at: /ivry_project/comfyUI_project/app_{your_app_id}/</p> </li> </ol>"},{"location":"getting-started/linux/#for-python-creator","title":"For Python creator:","text":"<ol> <li> <p>Create your predict.py </p> <p>You could find a template in /src/templates/predict.py</p> <p>After you finished it, please save it to the root of the repo: <pre><code>--comfyui_workflow\n--docs\n--src\n-predict.py\n-READEME.md\n</code></pre></p> </li> <li> <p>Generate predict_signature.json </p> <pre><code>ivry_cli parse_predict\n</code></pre> <p>That will generate a predict_signature.json file in the same directory, we will use it later</p> </li> <li> <p>Create your app on ivry website</p> </li> <li> <p>Pull your project to cli (windows users):</p> <pre><code>ivry_cli pull_project --app_id your_app_id\n</code></pre> <p>Example:</p> <pre><code>ivry_cli pull_project --app_id 123\n</code></pre> </li> </ol>"},{"location":"getting-started/linux/#5-host-your-app","title":"5. Host Your App","text":"<p>Start both the ivry_cli model server and cloudflared tunnel:</p> <pre><code>cd path/to/your/app\nivry_cli run_server --force\n</code></pre>"},{"location":"getting-started/linux/#specify-a-project-path","title":"Specify a project path","text":"<p>Please make sure your current path is at the root directory of the cli</p> <pre><code>ivry_cli run_server --project project_folder_name --force #like app_30\n</code></pre>"},{"location":"getting-started/linux/#stopping-the-server","title":"Stopping the Server","text":"<pre><code># Stop all running ivry services\nivry_cli stop_server [--project_path PATH] [--force]\n</code></pre> <p>The <code>--force</code> option allows you to terminate services that may be stuck or not responding to normal shutdown commands.</p>"},{"location":"getting-started/linux/#6-troubleshooting","title":"6. Troubleshooting","text":""},{"location":"getting-started/linux/#websocket-issues","title":"WebSocket Issues","text":"<p>If you encounter WebSocket errors when starting the server, try: <pre><code>pip uninstall websockets\npip install websocket-client\n</code></pre></p>"},{"location":"getting-started/mac/","title":"Macos Installation Guide","text":""},{"location":"getting-started/mac/#1-clone-the-ivry_cli-repository","title":"1. Clone the ivry_cli repository","text":"<pre><code>git clone https://github.com/Neural-Image/ivry_cli.git -b comfyUI\n</code></pre>"},{"location":"getting-started/mac/#2-install-the-cli","title":"2. Install the CLI","text":"<pre><code>cd ivry_cli\n</code></pre> <pre><code>./install.sh\n</code></pre> <p>if you encounter a permission error: <pre><code>chmod +x install.sh\n./install.sh\n</code></pre></p> <pre><code>source ~/.zshrc\n</code></pre> <p>you can check your installation by <pre><code>ivry_cli\n</code></pre></p> <p>and check pm2 installation by</p> <pre><code>pm2\n</code></pre> <p>if your pm2 could not found, you could use</p> <pre><code>npm install -g pm2\n</code></pre> <p>It will show a simple introduction to the cli, you could use \"q\" to quit</p>"},{"location":"getting-started/mac/#3-authenticate-using-an-api-key","title":"3. Authenticate using an API key","text":"<p>You need to go to our website and become a developer to get the apikey ivry website</p> <p>And then, login from ivry cli: <pre><code>ivry login YOUR_API_KEY\n</code></pre></p>"},{"location":"getting-started/mac/#4-create-your-app","title":"4. Create Your App","text":"<p>we support comfyUI apps and python apps.</p>"},{"location":"getting-started/mac/#for-comfyui-creator","title":"For ComfyUI creator:","text":"<ol> <li> <p>Create your app on ivry website</p> </li> <li> <p>Pull your project to cli (windows users):</p> <p>When using ComfyUI with Ivry CLI, ensure:</p> <p>a. ComfyUI is running with the <code>--listen</code> flag to enable API access</p> <p>b. Port 8188 (or your configured port) is accessible</p> <pre><code>ivry_cli pull_project --app_id your_app_id # you can specify your port by adding --comfyui_port\n</code></pre> <p>Example:</p> <pre><code>ivry_cli pull_project --app_id 123 \n</code></pre> <p>You can see your project locate at: /ivry_project/comfyUI_project/app_{your_app_id}/</p> </li> </ol>"},{"location":"getting-started/mac/#for-python-creator","title":"For Python creator:","text":"<ol> <li> <p>Create your predict.py </p> <p>You could find a template in /src/templates/predict.py</p> <p>After you finished it, please save it to the root of the repo: <pre><code>--comfyui_workflow\n--docs\n--src\n-predict.py\n-READEME.md\n</code></pre></p> </li> <li> <p>Generate predict_signature.json </p> <pre><code>ivry_cli parse_predict\n</code></pre> <p>That will generate a predict_signature.json file in the same directory, we will use it later</p> </li> <li> <p>Create your app on ivry website</p> </li> <li> <p>Pull your project to cli (windows users):</p> <pre><code>ivry_cli pull_project --app_id your_app_id\n</code></pre> <p>Example:</p> <pre><code>ivry_cli pull_project --app_id 123\n</code></pre> </li> </ol>"},{"location":"getting-started/mac/#5-host-your-app","title":"5. Host Your App","text":"<p>Start both the ivry_cli model server and cloudflared tunnel:</p> <pre><code>cd path/to/your/app\nivry_cli run_server --force\n</code></pre>"},{"location":"getting-started/mac/#specify-a-project-path","title":"Specify a project path","text":"<p>Please make sure your current path is at the root directory of the cli</p> <pre><code>ivry_cli run_server --project project_folder_name --force #like app_30\n</code></pre>"},{"location":"getting-started/mac/#stopping-the-server","title":"Stopping the Server","text":"<pre><code># Stop all running ivry services\nivry_cli stop_server [--project_path PATH] [--force]\n</code></pre> <p>The <code>--force</code> option allows you to terminate services that may be stuck or not responding to normal shutdown commands.</p>"},{"location":"getting-started/mac/#6-troubleshooting","title":"6. Troubleshooting","text":""},{"location":"getting-started/mac/#websocket-issues","title":"WebSocket Issues","text":"<p>If you encounter WebSocket errors when starting the server, try: <pre><code>pip uninstall websockets\npip install websocket-client\n</code></pre></p>"},{"location":"getting-started/windows/","title":"Windows Installation Guide","text":"<p>Installing Ivry CLI on Windows requires setting up the Windows Subsystem for Linux (WSL2) environment, as the CLI relies on Linux-compatible tools.</p>"},{"location":"getting-started/windows/#prerequisites","title":"Prerequisites","text":"<p>Before installing Ivry CLI, ensure you have:</p> <ul> <li>Windows 10 version 2004 or higher (Build 19041 or higher)</li> <li>Administrator privileges on your Windows account</li> <li>8GB of RAM or more (recommended)</li> </ul>"},{"location":"getting-started/windows/#step-1-install-windows-subsystem-for-linux-2-wsl2","title":"Step 1: Install Windows Subsystem for Linux 2 (WSL2)","text":"<p>First, we need to enable WSL2 and install a Linux distribution.</p> <ol> <li> <p>Get ivry_cli github repo</p> </li> <li> <p>Open wsl_install.bat in the repo folder as an administrator:</p> <p>Right-click on wsl_install.bat \u2192 Select \"Run as administrator\".   This command will enable the required Windows features and install Ubuntu as the default Linux distribution.</p> </li> <li> <p>Restart your computer when prompted</p> </li> <li> <p>After restart, Ubuntu will automatically start and ask you to create a username and password</p> </li> </ol> <p>If you encounter any issues or want to install a specific Linux distribution, you can use the following steps instead:</p> <ol> <li> <p>Open PowerShell as Administrator</p> </li> <li> <p>Enable the WSL feature and the Virtual Machine Platform feature:</p> <p>Run the following commands in PowerShell:</p> <pre><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n</code></pre> <pre><code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n</code></pre> </li> <li> <p>Restart your computer</p> </li> <li> <p>Download and install the WSL2 Linux kernel update package</p> </li> <li> <p>Set WSL2 as the default:</p> <pre><code>wsl --set-default-version 2\n</code></pre> </li> <li> <p>Set WSL2 as the default:</p> <pre><code>wsl --set-default-version 2\n</code></pre> </li> <li> <p>Install Ubuntu from the Microsoft Store</p> </li> </ol>"},{"location":"getting-started/windows/#step-2-install-python-and-required-dependencies","title":"Step 2: Install Python and Required Dependencies","text":"<ol> <li> <p>Importing the WSL2 Image</p> <p>A preconfigured WSL2 image is available for download:</p> <p>Download WSL2 Image</p> <p>To import the WSL2 environment, use the following command:</p> <pre><code>wsl --import ivry-cli &lt;path_to_wsl_directory&gt; &lt;path_to_image.tar&gt;\n</code></pre> <p>Example:</p> <pre><code>wsl --import ivry-cli C:\\WSL\\Ubuntu C:\\Users\\Downloads\\ivry-cli.tar   \n</code></pre> <p>Once imported, start the WSL2 instance with:</p> <pre><code>wsl -d ivry-cli   \n</code></pre> </li> <li> <p>Accessing the ivry-cli Environment:</p> <pre><code>cd /opt/ivry_cli\n</code></pre> <p>Activate virtual environment:</p> <pre><code>source venv/bin/activate\n</code></pre> <p>You could check if the environment is correct by:</p> <pre><code>ivry_cli\n</code></pre> <p>It will show a simple introduction to ivry_cli, you could use \"q\" to quit</p> </li> </ol>"},{"location":"getting-started/windows/#step-3-create-your-app","title":"Step 3: Create your app","text":"<p>We support comfyUI apps and python apps.</p>"},{"location":"getting-started/windows/#for-comfyui-creator","title":"For ComfyUI creator:","text":"<ol> <li> <p>Create your app on ivry website</p> </li> <li> <p>login from cli</p> <pre><code>ivry_cli login YOUR_API_KEY\n</code></pre> </li> <li> <p>Pull your project to cli (windows users):</p> <p>You need to find your comfyUI directory. It's the directory where have your \"custom_nodes\" </p> <p>Make sure your comfyUI dir is in \" \"</p> <p>When using ComfyUI with Ivry CLI, ensure:</p> <p>a. ComfyUI is running with the <code>--listen</code> flag to enable API access</p> <p>b. Port 8188 (or your configured port) is accessible from WSL</p> <pre><code>ivry_cli pull_project --app_id your_app_id --comfyUI_dir \"your_comfyUI_dir\"\n</code></pre> <p>Example:</p> <pre><code>ivry_cli pull_project --app_id 123 --comfyUI_dir \"E:\\ComfyUI_windows_portable\\ComfyUI\"\n</code></pre> </li> </ol> <p>You can see your project locate at: /ivry_project/comfyUI_project/app_{your_app_id}/</p>"},{"location":"getting-started/windows/#for-python-creator","title":"For Python creator:","text":"<ol> <li> <p>Create your predict.py </p> <p>You could find a template in /src/templates/predict.py</p> <p>After you finished it, please save it to the root of the repo: <pre><code>--comfyui_workflow\n--docs\n--src\n-predict.py\n-READEME.md\n</code></pre></p> </li> <li> <p>login from cli</p> <pre><code>ivry_cli login YOUR_API_KEY\n</code></pre> </li> <li> <p>Generate predict_signature.json </p> <pre><code>ivry_cli parse_predict\n</code></pre> </li> </ol> <p>That will generate a predict_signature.json file in the same directory, we will use it later</p> <ol> <li> <p>Create your app on ivry website</p> </li> <li> <p>Pull your project to cli (windows users):</p> <pre><code>ivry_cli pull_project --app_id your_app_id\n</code></pre> <p>Example:</p> <pre><code>ivry_cli pull_project --app_id 123\n</code></pre> </li> </ol>"},{"location":"getting-started/windows/#step-4-host-your-app","title":"Step 4: Host your app","text":"<p>Start both the ivry_cli model server and cloudflared tunnel:</p> <pre><code>cd path/to/your/app\nivry_cli run_server --force\n</code></pre>"},{"location":"getting-started/windows/#specify-a-project-path","title":"Specify a project path","text":"<p>Please make sure your current path is at the root directory of the cli</p> <pre><code>ivry_cli run_server --project project_folder_name --force #like app_30\n</code></pre>"},{"location":"getting-started/windows/#stopping-the-server","title":"Stopping the Server","text":"<pre><code># Stop all running ivry services\nivry_cli stop_server [--project_path PATH] [--force]\n</code></pre> <p>The <code>--force</code> option allows you to terminate services that may be stuck or not responding to normal shutdown commands.</p>"},{"location":"getting-started/windows/#troubleshooting-windows-installation","title":"Troubleshooting Windows Installation","text":""},{"location":"getting-started/windows/#wsl-installation-issues","title":"WSL Installation Issues","text":"<p>If you encounter problems installing WSL, check:</p> <ol> <li>That virtualization is enabled in your BIOS/UEFI</li> <li>That you're running a supported version of Windows 10/11</li> <li>The official Microsoft WSL troubleshooting guide</li> </ol>"},{"location":"getting-started/windows/#path-conversion-problems","title":"Path Conversion Problems","text":"<p>If you experience issues with file paths between Windows and WSL:</p> <ol> <li>Make sure your files are accessible from both Windows and WSL</li> <li>Use the built-in path conversion utilities in Ivry CLI</li> <li>Test file access with simple commands like <code>cat</code> or <code>ls</code> before running complex operations</li> </ol>"},{"location":"getting-started/windows/#comfyui-connection-issues","title":"ComfyUI Connection Issues","text":"<p>If Ivry CLI cannot connect to ComfyUI:</p> <ol> <li>Ensure ComfyUI is running with the <code>--listen</code> flag</li> <li>Verify you can access the ComfyUI interface from a browser at <code>http://127.0.0.1:8188</code></li> <li>Check your firewall settings to ensure the port is accessible</li> <li>Run <code>ivry_cli find_comfyUI</code> to detect running ComfyUI instances</li> </ol> <p>For more detailed troubleshooting, see the Troubleshooting section.</p>"}]}